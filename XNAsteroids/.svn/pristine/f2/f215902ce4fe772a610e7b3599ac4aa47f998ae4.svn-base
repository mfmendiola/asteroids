using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;


namespace GameStateManagement
{
    /// <summary>
    /// This is a game component that implements IUpdateable.
    /// </summary>
    /// 


  
    public class SpawnManager : Microsoft.Xna.Framework.GameComponent
    {
        private System.Collections.ArrayList asteroids = new System.Collections.ArrayList();
        private Utils.Timer asteroidTimer;

        private Game localGame;  // local copy of game

        private Asteroid tempAsteroid;

        private Random randomNumGenerator;

        public SpawnManager(Game game)
            : base(game)
        {
            localGame = game;
            asteroidTimer = new Utils.Timer();
            asteroidTimer.AddTimer("asteroidTimer", 5.0f, timerDelegateFunction, true);
            randomNumGenerator = new Random();
            // TODO: Construct any child components here
        }

        /// <summary>
        /// Allows the game component to perform any initialization it needs to before starting
        /// to run.  This is where it can query for any required services and load content.
        /// </summary>
        public override void Initialize()
        {
            // TODO: Add your initialization code here

            base.Initialize();
        }

        /// <summary>
        /// Allows the game component to update itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        public override void Update(GameTime gameTime)
        {
            // TODO: Add your update code here
            if (asteroids.Count < 10)
            {

                if (asteroidTimer.GetTriggerCount("asteroidTimer") % 5 == 0)
                {
                    tempAsteroid = new Asteroid(localGame);
                    localGame.Components.Add(tempAsteroid);
                    asteroids.Add(tempAsteroid);
                    tempAsteroid.worldTransformMatrix.Translation = new Vector3((float)randomNumGenerator.NextDouble() * 512.0f, -380.0f, 0.0f);
                    
                }
                
            }

            foreach(Asteroid a in asteroids){
                a.worldTransformMatrix = Matrix.CreateTranslation(new Vector3(0.0f, 2.0f, 0.0f));
            }
            asteroidTimer.Update(gameTime);
            base.Update(gameTime);
        }

        public System.Collections.ArrayList getAsteroids()
        {
            return asteroids;
        }

        public void timerDelegateFunction()
        {

        }

    }
}
